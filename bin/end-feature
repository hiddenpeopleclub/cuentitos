#!/bin/bash

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get list of worktrees (excluding the main repo)
worktrees=()
worktree_paths=()
worktree_branches=()

while IFS= read -r line; do
  # Parse git worktree list output: path branch [details]
  path=$(echo "$line" | awk '{print $1}')
  branch=$(echo "$line" | grep -o '\[.*\]' | tr -d '[]' || echo "")

  # Skip the main repository worktree
  if [[ "$line" != *"(bare)"* ]] && [[ "$path" != "$(git rev-parse --show-toplevel)" ]]; then
    # Extract just the directory name for display
    dir_name=$(basename "$path")
    worktrees+=("$dir_name ($branch)")
    worktree_paths+=("$path")
    worktree_branches+=("$branch")
  fi
done < <(git worktree list --porcelain | grep -E "^worktree |^branch " | paste -d " " - - | sed 's/worktree //;s/branch //')

# Check if there are any worktrees to clean up
if [ ${#worktrees[@]} -eq 0 ]; then
  echo -e "${YELLOW}No worktrees found to clean up${NC}"
  exit 0
fi

echo -e "${BLUE}Select a worktree to remove:${NC}"
echo -e "${YELLOW}Use ↑/↓ arrow keys to navigate, Enter to select, q to quit${NC}\n"

# Use fzf if available, otherwise use custom arrow key navigation
if command -v fzf &> /dev/null; then
  selected=$(printf "%s\n" "${worktrees[@]}" | fzf --height=20 --reverse \
    --prompt="Worktree: ")

  # Check if user cancelled selection
  if [ -z "$selected" ]; then
    echo "Selection cancelled"
    exit 0
  fi
else
  # Custom arrow key navigation
  selected_index=0
  total=${#worktrees[@]}

  # Hide cursor
  tput civis

  # Function to draw menu
  draw_menu() {
    tput cup 3 0
    for i in "${!worktrees[@]}"; do
      if [ $i -eq $selected_index ]; then
        echo -e "${GREEN}▶ ${worktrees[$i]}${NC}"
      else
        echo "  ${worktrees[$i]}"
      fi
    done
  }

  # Initial draw
  draw_menu

  # Read arrow keys
  while true; do
    read -rsn1 key

    if [[ $key == $'\x1b' ]]; then
      read -rsn2 key
      case $key in
        '[A') # Up arrow
          ((selected_index--))
          if [ $selected_index -lt 0 ]; then
            selected_index=$((total - 1))
          fi
          draw_menu
          ;;
        '[B') # Down arrow
          ((selected_index++))
          if [ $selected_index -ge $total ]; then
            selected_index=0
          fi
          draw_menu
          ;;
      esac
    elif [[ $key == "" ]]; then # Enter
      break
    elif [[ $key == "q" ]]; then
      tput cnorm
      echo -e "\n\nSelection cancelled"
      exit 0
    fi
  done

  # Show cursor again
  tput cnorm

  selected="${worktrees[$selected_index]}"
  echo -e "\n"
fi

# Find the selected worktree index
selected_idx=-1
for i in "${!worktrees[@]}"; do
  if [ "${worktrees[$i]}" == "$selected" ]; then
    selected_idx=$i
    break
  fi
done

if [ $selected_idx -eq -1 ]; then
  echo -e "${RED}Error: Could not find selected worktree${NC}"
  exit 1
fi

worktree_path="${worktree_paths[$selected_idx]}"
branch_name="${worktree_branches[$selected_idx]}"

echo -e "\n${BLUE}Selected worktree:${NC} $worktree_path"
echo -e "${BLUE}Branch:${NC} $branch_name"

# Check for uncommitted changes
echo -e "\n${YELLOW}Checking for uncommitted changes...${NC}"
cd "$worktree_path"
if [ -n "$(git status --porcelain)" ]; then
  echo -e "${YELLOW}⚠ Warning: This worktree has uncommitted changes:${NC}"
  git status --short
  echo ""
  read -p "Continue with deletion? (y/n): " -n 1 -r
  echo ""
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Deletion cancelled"
    exit 0
  fi
fi

# Check for unpushed commits
echo -e "${YELLOW}Checking for unpushed commits...${NC}"
# Get the upstream branch if it exists
upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo "")
if [ -n "$upstream" ]; then
  unpushed=$(git log "$upstream"..HEAD --oneline 2>/dev/null || echo "")
  if [ -n "$unpushed" ]; then
    echo -e "${YELLOW}⚠ Warning: This worktree has unpushed commits:${NC}"
    echo "$unpushed"
    echo ""
    read -p "Continue with deletion? (y/n): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "Deletion cancelled"
      exit 0
    fi
  fi
fi

# Return to original directory
cd - > /dev/null

# Remove the worktree
echo -e "\n${YELLOW}Removing worktree...${NC}"
git worktree remove "$worktree_path" --force

echo -e "${GREEN}✓ Worktree removed${NC}"

# Check if branch is merged to main
echo -e "\n${YELLOW}Checking if branch is merged to main...${NC}"
if git branch --merged main | grep -q "^\s*${branch_name}\$"; then
  echo -e "${GREEN}Branch is merged to main${NC}"
  read -p "Delete branch '$branch_name'? (y/n): " -n 1 -r
  echo ""
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    git branch -d "$branch_name"
    echo -e "${GREEN}✓ Branch deleted${NC}"
  else
    echo -e "${BLUE}Branch kept: $branch_name${NC}"
  fi
else
  echo -e "${YELLOW}Branch is NOT merged to main - keeping branch: $branch_name${NC}"
  echo -e "${BLUE}You can manually delete it later with: git branch -D $branch_name${NC}"
fi

echo -e "\n${GREEN}✓ Cleanup complete${NC}"
