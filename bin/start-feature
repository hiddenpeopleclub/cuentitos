#!/bin/bash

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

TODO_FILE="TODO.md"

# Check if TODO.md exists
if [ ! -f "$TODO_FILE" ]; then
  echo "Error: TODO.md not found"
  exit 1
fi

# Extract unchecked items from TODO.md with their section
items=()
current_section=""

while IFS= read -r line; do
  # Check if line is a section header
  if [[ $line =~ ^#[[:space:]](.+)$ ]]; then
    current_section="${BASH_REMATCH[1]}"
  # Check if line is an unchecked item
  elif [[ $line =~ ^[[:space:]]*-[[:space:]]\[[[:space:]]\][[:space:]](.+)$ ]]; then
    item_text="${BASH_REMATCH[1]}"
    items+=("[$current_section] $item_text")
  fi
done < "$TODO_FILE"

# Check if there are any unchecked items
if [ ${#items[@]} -eq 0 ]; then
  echo "No unchecked items found in TODO.md"
  exit 0
fi

echo -e "${BLUE}Select a feature to start working on:${NC}"
echo -e "${YELLOW}Use ↑/↓ arrow keys to navigate, Enter to select, q to quit${NC}\n"

# Use fzf if available, otherwise use custom arrow key navigation
if command -v fzf &> /dev/null; then
  selected=$(printf "%s\n" "${items[@]}" | fzf --height=20 --reverse \
    --prompt="Feature: ")

  # Check if user cancelled selection
  if [ -z "$selected" ]; then
    echo "Selection cancelled"
    exit 0
  fi
else
  # Custom arrow key navigation
  selected_index=0
  total=${#items[@]}

  # Hide cursor
  tput civis

  # Function to draw menu
  draw_menu() {
    tput cup 3 0
    for i in "${!items[@]}"; do
      if [ $i -eq $selected_index ]; then
        echo -e "${GREEN}▶ ${items[$i]}${NC}"
      else
        echo "  ${items[$i]}"
      fi
    done
  }

  # Initial draw
  draw_menu

  # Read arrow keys
  while true; do
    read -rsn1 key

    if [[ $key == $'\x1b' ]]; then
      read -rsn2 key
      case $key in
        '[A') # Up arrow
          ((selected_index--))
          if [ $selected_index -lt 0 ]; then
            selected_index=$((total - 1))
          fi
          draw_menu
          ;;
        '[B') # Down arrow
          ((selected_index++))
          if [ $selected_index -ge $total ]; then
            selected_index=0
          fi
          draw_menu
          ;;
      esac
    elif [[ $key == "" ]]; then # Enter
      break
    elif [[ $key == "q" ]]; then
      tput cnorm
      echo -e "\n\nSelection cancelled"
      exit 0
    fi
  done

  # Show cursor again
  tput cnorm

  selected="${items[$selected_index]}"
  echo -e "\n"
fi

echo -e "\n${GREEN}Selected:${NC} $selected"

# Extract just the feature name (remove section prefix and any trailing info)
# Remove the [Section] prefix
feature_name=$(echo "$selected" | sed 's/^\[.*\][[:space:]]*//')
# Remove any text in parentheses at the end
feature_name=$(echo "$feature_name" | sed 's/[[:space:]]*(.*)[[:space:]]*$//')
# Convert to lowercase and replace spaces with hyphens
branch_name=$(echo "$feature_name" | tr '[:upper:]' '[:lower:]' | \
  tr ' ' '-' | sed 's/[^a-z0-9-]//g')
branch_name="v3-${branch_name}"

worktree_path="../${branch_name}"

echo -e "${YELLOW}Creating worktree:${NC} $worktree_path"

# Check if worktree already exists
if [ -d "$worktree_path" ]; then
  echo -e "${YELLOW}Worktree already exists at $worktree_path${NC}"
else
  # Check if branch already exists
  if git show-ref --verify --quiet "refs/heads/$branch_name"; then
    # Branch exists, create worktree for existing branch
    git worktree add "$worktree_path" "$branch_name"
  else
    # Create new branch with worktree
    git worktree add -b "$branch_name" "$worktree_path"
  fi
fi

echo -e "\n${GREEN}✓ Ready to start working on: $feature_name${NC}"
echo -e "${BLUE}Next steps:${NC}"
echo -e "  1. ${YELLOW}cd $worktree_path${NC}"
echo "  2. Follow the development flow in DEV.md"
echo "  3. Start with the Feature Plan phase"
echo "  4. Create a PR after the Feature Plan phase"
